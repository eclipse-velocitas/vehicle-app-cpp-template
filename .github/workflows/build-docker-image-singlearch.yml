# Copyright (c) 2022 Robert Bosch GmbH
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0

# _Summary_
#
# Builds an application container for a single target architecture.

name: App - Build Docker Image for single arch

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      deployment-matrix-str:
        required: true
        type: string
    outputs:
      imageid:
        value: ${{ jobs.build-image.outputs.imageid }}
      imagedigest:
        value: ${{ jobs.build-image.outputs.digest }}

jobs:
  build-image:
    name: "Building image (${{ matrix.component.Name }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(inputs.deployment-matrix-str) }}
    outputs:
      imageid: ${{ steps.image_build.outputs.imageid }}
      imagedigest: ${{ steps.image_build.outputs.imagedigest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v3
        with:
          repository: eclipse-velocitas/release-documentation-action
          path: "./.github/actions"

      - name: Check Docker version
        run: docker --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://user:${{ secrets.GITHUB_TOKEN }}@github.com/

      - name: Setup git config
        shell: bash
        run: |
          git config --global user.email "github-automation@users.noreply.github.com"
          git config --global user.name "Github Automation"

      - name: "${{ matrix.component.Name }} -- Build image"
        id: image_build
        uses: docker/build-push-action@v3.2.0
        with:
          pull: false
          push: false
          outputs: |
            type=oci,dest=./${{ matrix.component.Name }}.tar
          file: ${{ matrix.component.Dockerfile }}
          context: .
          platforms: linux/${{ inputs.platform }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{steps.github-repository-name-case-adjusted.outputs.lowercase}}

      - name: "${{ matrix.component.Name }} -- Inspect tar image with skopeo"
        run: |
          skopeo inspect --raw oci-archive:${{ matrix.component.Name }}.tar | jq
          skopeo inspect oci-archive:${{ matrix.component.Name }}.tar
          skopeo copy oci-archive:${{ matrix.component.Name }}.tar docker-archive:${{ matrix.component.Name }}-${{ inputs.platform }}.tar

      - name: "${{ matrix.component.Name }} -- Scan docker image for vulnerabilities"
        uses: aquasecurity/trivy-action@0.8.0
        with:
          input: ${{ matrix.component.Name }}-${{ inputs.platform }}.tar
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          format: "template"
          template: "@.github/scripts/junit.tpl"
          output: "junit.xml"

      - name: "${{ matrix.component.Name }} -- Show scan results"
        if: ${{ always() }}
        run: cat ./junit.xml

      - name: "${{ matrix.component.Name }} -- Package vulnerability scan files"
        uses: ./.github/actions/package
        with:
          name: "VulnerabilityScan-${{ matrix.component.Name }}"
          type: "VulnerabilityScan"
          schema: "JUnit"
          sourcePath: ./junit.xml
          packagePath: results/Documentation/renderer

      - name: "${{ matrix.component.Name }} -- Upload trivy report as artifacts"
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v3.1.0
        with:
          name: test-results
          path: |
            results/Documentation/renderer/*

      - name: "${{ matrix.component.Name }} -- Publish Trivy Scan Results"
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        with:
          check_name: Trivy Scan Results (${{ matrix.component.Name }})
          comment_title: Trivy Scan Results (${{ matrix.component.Name }})
          fail_on: "errors"
          junit_files: ./junit.xml

      - name: "${{ matrix.component.Name }} -- Upload image to artifacts"
        if: ${{ steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v3.1.0
        env:
          VAPP_IMAGE: ${{ matrix.component.Name }}-${{ inputs.platform }}
        with:
          name: ${{ env.VAPP_IMAGE }}
          path: ./${{ matrix.component.Name }}-${{ inputs.platform }}.tar
          if-no-files-found: error
